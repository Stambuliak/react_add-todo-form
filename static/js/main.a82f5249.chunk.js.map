{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","TodoList","todos","map","userId","usersFromServer","find","App","useState","setTitle","userName","setUserName","hasTitle","setHasTitle","selectedUser","setSelectedUser","visibleTodos","setVisibleTodos","action","method","onSubmit","event","preventDefault","usersId","maxId","Math","max","newUser","newTodo","type","placeholder","value","onChange","e","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a82f5249.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\nexport interface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    id,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={completed\n        ? 'TodoInfo TodoInfo--completed'\n        : 'TodoInfo'}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => {\n        return (\n          <TodoInfo todo={todo} key={todo.id} />\n        );\n      })}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { FC, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nconst todos = todosFromServer.map((todo) => {\n  return {\n    ...todo,\n    user: usersFromServer.find((user) => user.id === todo.userId) || null,\n  };\n});\n\nexport const App: FC = () => {\n  const [title, setTitle] = useState('');\n  const [userName, setUserName] = useState('');\n  const [hasTitle, setHasTitle] = useState(true);\n  const [selectedUser, setSelectedUser] = useState(true);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (title && userName) {\n            const usersId: number[] = visibleTodos.map((todo) => todo.id);\n            const maxId: number = Math.max(...usersId);\n            const newUser = usersFromServer.find((user) => {\n              return user.name === userName;\n            });\n            const newTodo: Todo = {\n              id: maxId + 1,\n              title,\n              completed: false,\n              userId: newUser?.id || 0,\n              user: newUser || null,\n            };\n\n            setVisibleTodos([\n              ...visibleTodos,\n              newTodo,\n            ]);\n\n            setUserName('');\n            setTitle('');\n          }\n\n          if (!title) {\n            setHasTitle(false);\n          }\n\n          if (!userName) {\n            setSelectedUser(false);\n          }\n        }}\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n              setHasTitle(true);\n            }}\n          />\n\n          {!hasTitle\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={userName}\n            onChange={(e) => {\n              setUserName(e.target.value);\n              setSelectedUser(true);\n            }}\n          >\n            <option value=\"\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => {\n              return <option key={user.id}>{user.name}</option>;\n            })}\n          </select>\n\n          {!selectedUser\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}